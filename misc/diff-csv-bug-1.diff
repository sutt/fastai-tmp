diff --git a/fastai/callbacks/csv_logger.py b/fastai/callbacks/csv_logger.py
index df68ea80d14780ca734f32d86b17ead1a26468ee..c933dcd157626f26b6ee1c3eb54230c4e23e65f5 100644
--- a/fastai/callbacks/csv_logger.py
+++ b/fastai/callbacks/csv_logger.py
@@ -4,6 +4,8 @@ from ..torch_core import *
 from ..basic_data import DataBunch
 from ..callback import *
 from ..basic_train import Learner, LearnerCallback
+from time import time
+from fastprogress.fastprogress import format_time
 
 __all__ = ['CSVLogger']
 
@@ -12,6 +14,7 @@ class CSVLogger(LearnerCallback):
     def __init__(self, learn:Learner, filename: str = 'history', append: bool = False): 
         super().__init__(learn)
         self.filename,self.path,self.append = filename,self.learn.path/f'{filename}.csv',append
+        self.add_time = True
 
     def read_logged_file(self):  
         "Read the content of saved file"
@@ -21,15 +24,20 @@ class CSVLogger(LearnerCallback):
         "Prepare file with metric names."
         self.path.parent.mkdir(parents=True, exist_ok=True)      
         self.file = self.path.open('a') if self.append else self.path.open('w')
-        self.file.write(','.join(self.learn.recorder.names[:-1]) + '\n')
+        self.file.write(','.join(self.learn.recorder.names[:(None if self.add_time else -1)]) + '\n')
+
+    def on_epoch_begin(self, **kwargs:Any)->None:
+        if self.add_time: self.start_epoch = time()
         
     def on_epoch_end(self, epoch: int, smooth_loss: Tensor, last_metrics: MetricsList, **kwargs: Any) -> bool:
         "Add a line with `epoch` number, `smooth_loss` and `last_metrics`."
         last_metrics = ifnone(last_metrics, [])
         stats = [str(stat) if isinstance(stat, int) else '#na#' if stat is None else f'{stat:.6f}'
                  for name, stat in zip(self.learn.recorder.names, [epoch, smooth_loss] + last_metrics)]
+        if self.add_time: stats.append(format_time(time() - self.start_epoch))
         str_stats = ','.join(stats)
         self.file.write(str_stats + '\n')
+        
 
     def on_train_end(self, **kwargs: Any) -> None:  
         "Close the file."
